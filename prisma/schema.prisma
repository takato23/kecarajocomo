// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ==================== AUTH & USER MODELS ====================

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  emailVerified       DateTime?
  password            String?
  name                String?
  image               String?
  onboardingCompleted Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  accounts            Account[]
  sessions            Session[]
  recipes             Recipe[]
  pantryItems         PantryItem[]
  mealPlans           MealPlan[]
  shoppingLists       ShoppingList[]
  chatSessions        ChatSession[]
  preferences         UserPreferences?
  favoriteRecipes     FavoriteRecipe[]
  recipeRatings       RecipeRating[]
  scannedReceipts     ScannedReceipt[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id                  String   @id @default(cuid())
  userId              String   @unique
  dietaryRestrictions String[] // vegetarian, vegan, gluten-free, dairy-free, etc.
  allergies           String[] // peanuts, shellfish, eggs, etc.
  favoriteCuisines    String[] // italian, mexican, asian, etc.
  cookingSkillLevel   String   @default("intermediate") // beginner, intermediate, advanced
  householdSize       Int      @default(1)
  weeklyBudget        Float?
  preferredMealTypes  String[] // quick, healthy, budget-friendly, gourmet
  avoidIngredients    String[]
  calorieTarget       Int?
  proteinTarget       Int?
  carbTarget          Int?
  fatTarget           Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ==================== RECIPE MODELS ====================

model Recipe {
  id               String    @id @default(cuid())
  title            String
  description      String?
  instructions     String[]
  prepTimeMinutes  Int
  cookTimeMinutes  Int
  servings         Int       @default(4)
  difficulty       String    @default("medium") // easy, medium, hard
  cuisine          String?
  tags             String[]
  imageUrl         String?
  videoUrl         String?
  source           String    @default("user") // user, ai-generated, imported
  sourceUrl        String?
  isPublic         Boolean   @default(false)
  aiPrompt         String?   // Store the prompt used for AI generation
  authorId         String?
  author           User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  ingredients      RecipeIngredient[]
  mealPlanEntries  MealPlanEntry[]
  nutritionInfo    NutritionInfo?
  favorites        FavoriteRecipe[]
  ratings          RecipeRating[]
  
  // Computed fields
  averageRating    Float?
  totalRatings     Int       @default(0)
  totalFavorites   Int       @default(0)
}

model Ingredient {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String?  // vegetables, fruits, dairy, meat, etc.
  unit        String   @default("g") // default unit
  
  // Relations
  recipes           RecipeIngredient[]
  pantryItems       PantryItem[]
  shoppingListItems ShoppingListItem[]
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  recipeId     String
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantity     Float
  unit         String     // g, ml, cups, tbsp, tsp, etc.
  notes        String?    // "diced", "optional", etc.

  @@unique([recipeId, ingredientId])
}

model NutritionInfo {
  id         String  @id @default(cuid())
  recipeId   String  @unique
  recipe     Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  calories   Float
  protein    Float   // grams
  carbs      Float   // grams
  fat        Float   // grams
  fiber      Float?  // grams
  sugar      Float?  // grams
  sodium     Float?  // mg
  cholesterol Float? // mg
}

model FavoriteRecipe {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, recipeId])
}

model RecipeRating {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, recipeId])
}

// ==================== PANTRY MODELS ====================

model PantryItem {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantity     Float
  unit         String
  location     String     @default("pantry") // pantry, fridge, freezer
  expiryDate   DateTime?
  purchaseDate DateTime   @default(now())
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relations
  extended     PantryItemExtended?
}

// ==================== MEAL PLANNING MODELS ====================

model MealPlan {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime @db.Date // The specific day for the plan
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  entries MealPlanEntry[]

  @@unique([userId, date])
}

model MealPlanEntry {
  id         String   @id @default(cuid())
  mealPlanId String
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  recipeId   String
  recipe     Recipe   @relation(fields: [recipeId], references: [id])
  mealType   String   // breakfast, lunch, dinner, snack
  servings   Int      @default(1)
  notes      String?
  order      Int      @default(0) // For ordering meals within the same type

  @@unique([mealPlanId, mealType, order])
}

// ==================== SHOPPING LIST MODELS ====================

model ShoppingList {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String   @default("My Shopping List")
  dateFrom  DateTime? // Generated from meal plan date range
  dateTo    DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items ShoppingListItem[]
}

model ShoppingListItem {
  id             String       @id @default(cuid())
  shoppingListId String
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  ingredientId   String
  ingredient     Ingredient   @relation(fields: [ingredientId], references: [id])
  quantity       Float
  unit           String
  isChecked      Boolean      @default(false)
  category       String?      // For grouping in the UI
  notes          String?
  addedFrom      String?      // "meal-plan", "manual", "pantry-low"
}

// ==================== AI CHAT MODELS ====================

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String   @default("New Chat")
  context   String?  // Current cooking context (recipe being made, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages ChatMessage[]
}

model ChatMessage {
  id        String      @id @default(cuid())
  sessionId String
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  role      String      // user, assistant, system
  content   String      @db.Text
  metadata  Json?       // Store any additional data (tool calls, etc.)
  createdAt DateTime    @default(now())
}

// ==================== STORE & PRICE TRACKING MODELS ====================

model Store {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  logoUrl   String?  @map("logo_url")
  createdAt DateTime @default(now()) @map("created_at")
  
  prices    PriceHistory[]
  receipts  ScannedReceipt[]
  
  @@map("stores")
}

model Product {
  id             String   @id @default(cuid())
  name           String
  normalizedName String   @map("normalized_name")
  barcode        String?  @unique
  category       String?
  brand          String?
  imageUrl       String?  @map("image_url")
  createdAt      DateTime @default(now()) @map("created_at")
  
  prices         PriceHistory[]
  pantryItems    PantryItemExtended[]
  
  @@index([normalizedName])
  @@index([barcode])
  @@map("products")
}

model PriceHistory {
  id         String   @id @default(cuid())
  productId  String   @map("product_id")
  storeId    String   @map("store_id")
  price      Decimal  @db.Decimal(10, 2)
  currency   String   @default("ARS")
  recordedAt DateTime @default(now()) @map("recorded_at")
  source     String   // 'scraper', 'manual', 'receipt'
  
  product    Product  @relation(fields: [productId], references: [id])
  store      Store    @relation(fields: [storeId], references: [id])
  
  @@index([productId, storeId])
  @@index([recordedAt])
  @@map("price_history")
}

model PantryItemExtended {
  id              String    @id @default(cuid())
  pantryItemId    String    @unique @map("pantry_item_id")
  productId       String?   @map("product_id")
  purchasePrice   Decimal?  @db.Decimal(10, 2) @map("purchase_price")
  purchaseDate    DateTime? @map("purchase_date")
  scannedBarcode  String?   @map("scanned_barcode")
  scannedReceiptId String?  @map("scanned_receipt_id")
  
  pantryItem      PantryItem      @relation(fields: [pantryItemId], references: [id], onDelete: Cascade)
  product         Product?        @relation(fields: [productId], references: [id])
  scannedReceipt  ScannedReceipt? @relation(fields: [scannedReceiptId], references: [id])
  
  @@map("pantry_items_extended")
}

model ScannedReceipt {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  imageUrl    String?  @map("image_url")
  rawText     String?  @map("raw_text") @db.Text
  parsedData  Json?    @map("parsed_data")
  storeId     String?  @map("store_id")
  totalAmount Decimal? @db.Decimal(10, 2) @map("total_amount")
  scannedAt   DateTime @default(now()) @map("scanned_at")
  
  user        User     @relation(fields: [userId], references: [id])
  store       Store?   @relation(fields: [storeId], references: [id])
  pantryItems PantryItemExtended[]
  
  @@map("scanned_receipts")
}