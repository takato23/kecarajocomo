import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { logger } from '@/lib/logger';
import { geminiPlannerService } from '@/lib/services/geminiPlannerService';
import { 
  UserPreferences, 
  PlanningConstraints 
} from '@/lib/types/mealPlanning';
import { GeminiPlannerOptions } from '@/lib/services/geminiPlannerService';

export async function POST(req: NextRequest) {
  try {
    const cookieStore = await cookies();
    const supabase = createClient(cookieStore);
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    // Temporarily bypass authentication for testing
    const mockUser = {
      id: 'mock-user-' + Date.now(),
      email: 'test@example.com'
    };
    const activeUser = user || mockUser;

    const body = await req.json();
    const { preferences, constraints, options } = body;

    // Validate required fields
    if (!preferences || !constraints) {
      return NextResponse.json(
        { error: 'Missing required fields: preferences and constraints' },
        { status: 400 }
      );
    }

    // Ensure user ID is set
    const userPreferences: UserPreferences = {
      ...preferences,
      userId: activeUser.id
    };

    const planningConstraints: PlanningConstraints = {
      ...constraints,
      startDate: new Date(constraints.startDate),
      endDate: new Date(constraints.endDate)
    };

    const plannerOptions: GeminiPlannerOptions = {
      useHolisticAnalysis: true,
      includeExternalFactors: true, 
      optimizeResources: true,
      enableLearning: true,
      analysisDepth: 'comprehensive',
      ...options
    };

    logger.info('Generating weekly meal plan', 'meal-planning/generate', {
      userId: activeUser.id,
      dateRange: `${planningConstraints.startDate} - ${planningConstraints.endDate}`,
      options: plannerOptions
    });

    const result = await geminiPlannerService.generateHolisticPlan(
      userPreferences,
      planningConstraints,
      plannerOptions
    );

    if (!result.success) {
      logger.error('Failed to generate meal plan', 'meal-planning/generate', result.error);
      return NextResponse.json(
        { 
          success: false,
          error: result.error || 'Failed to generate meal plan'
        },
        { status: 500 }
      );
    }

    logger.info('Successfully generated meal plan', 'meal-planning/generate', {
      userId: activeUser.id,
      confidence: result.metadata.confidenceScore,
      processingTime: result.metadata.processingTime
    });

    return NextResponse.json({
      success: true,
      plan: result.plan,
      insights: result.insights,
      metadata: result.metadata
    });

  } catch (error) {
    logger.error('Error in meal plan generation endpoint', 'meal-planning/generate', error);
    
    return NextResponse.json(
      { 
        success: false,
        error: error instanceof Error ? error.message : 'Internal server error'
      },
      { status: 500 }
    );
  }
}